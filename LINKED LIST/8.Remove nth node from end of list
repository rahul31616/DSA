#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

Node* removeNthFromEnd(Node* head, int n) {
    Node* dummy = new Node(0);
    dummy->next = head;
    Node* fast = dummy;
    Node* slow = dummy;

    // Move fast n steps ahead
    for (int i = 0; i < n; ++i) {
        fast = fast->next;
    }

    // Move both until fast reaches the last node
    while (fast->next) {
        fast = fast->next;
        slow = slow->next;
    }

    // Remove the nth node from end
    Node* toDelete = slow->next;
    slow->next = slow->next->next;
    delete toDelete;

    Node* newHead = dummy->next;
    delete dummy;
    return newHead;
}

// Print linked list
void printList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

// Sample usage
int main() {
    // Linked list: 1 -> 2 -> 3 -> 4 -> 5
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);
    head->next->next->next->next = new Node(5);

    int n = 2;
    head = removeNthFromEnd(head, n);

    printList(head);  // Output: 1 2 3 5

    return 0;
}
