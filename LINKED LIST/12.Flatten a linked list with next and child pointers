struct Node {
    int val;
    Node* next;
    Node* child;
    Node(int x) : val(x), next(NULL), child(NULL) {}
};

class Solution {
public:
    Node* flatten(Node* head) {
        if (!head) return nullptr;
        flattenDFS(head);
        return head;
    }

private:
    // returns the tail of the flattened list
    Node* flattenDFS(Node* node) {
        Node* curr = node;
        Node* last = node;

        while (curr) {
            Node* nextNode = curr->next;

            // If child exists, flatten it first
            if (curr->child) {
                Node* childTail = flattenDFS(curr->child);

                // splice child between curr and nextNode
                curr->next = curr->child;
                curr->child = nullptr; // remove child link
                childTail->next = nextNode;

                last = childTail; // update last node
            } else {
                last = curr;
            }

            curr = nextNode;
        }
        return last;
    }
};
