#include <bits/stdc++.h>
using namespace std;

// Function to calculate next gap
int nextGap(int gap) {
    if (gap <= 1)
        return 0;
    return (gap / 2) + (gap % 2);
}

void merge(long long arr1[], long long arr2[], int n, int m) {
    int gap = nextGap(n + m);
    
    while (gap > 0) {
        int i = 0, j = gap;

        while (j < (n + m)) {
            long long a = (i < n) ? arr1[i] : arr2[i - n];
            long long b = (j < n) ? arr1[j] : arr2[j - n];

            if (a > b) {
                if (i < n && j < n)
                    swap(arr1[i], arr1[j]);
                else if (i < n && j >= n)
                    swap(arr1[i], arr2[j - n]);
                else
                    swap(arr2[i - n], arr2[j - n]);
            }

            i++;
            j++;
        }

        gap = nextGap(gap);
    }
}

int main() {
    long long arr1[] = {1, 4, 7, 8, 10};
    long long arr2[] = {2, 3, 9};
    int n = 5, m = 3;

    merge(arr1, arr2, n, m);

    cout << "After Merging:\n";
    for (int i = 0; i < n; i++) cout << arr1[i] << " ";
    for (int i = 0; i < m; i++) cout << arr2[i] << " ";

    return 0;
}
