arr = {5, 5, 10, 100, 10, 5}

#include <bits/stdc++.h>
using namespace std;

int findMaxSum(int arr[], int n) {
    if (n == 0) return 0;       // No house
    if (n == 1) return arr[0];  // Only one house
    if (n == 2) return max(arr[0], arr[1]); // Max of two

    // dp[i] will store max sum till house i
    int dp[n];

    dp[0] = arr[0];                   // Rob first house
    dp[1] = max(arr[0], arr[1]);      // Max of first or second

    for (int i = 2; i < n; i++) {
        // Either rob this house and add dp[i-2], or skip and take dp[i-1]
        dp[i] = max(arr[i] + dp[i-2], dp[i-1]);
    }

    return dp[n - 1];  // Max loot possible
}

int main() {
    int arr[] = {5, 5, 10, 100, 10, 5};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Maximum loot = " << findMaxSum(arr, n);
    return 0;
}


 Optional: Optimized Space Version
cpp
Copy
Edit
int findMaxSum(int arr[], int n) {
    int prev2 = 0, prev1 = 0;

    for (int i = 0; i < n; i++) {
        int curr = max(arr[i] + prev2, prev1);
        prev2 = prev1;
        prev1 = curr;
    }

    return prev1;
}
