#include <bits/stdc++.h>
using namespace std;

class DLLNode {
public:
    int data;
    DLLNode* prev;
    DLLNode* next;
    DLLNode(int x) : data(x), prev(NULL), next(NULL) {}
};

class MyStack {
    DLLNode* head; // top of stack
    DLLNode* mid;  // middle pointer
    int count;     // size of stack

public:
    MyStack() {
        head = NULL;
        mid = NULL;
        count = 0;
    }

    void push(int x) {
        DLLNode* node = new DLLNode(x);
        node->next = head;

        if (head != NULL)
            head->prev = node;

        head = node;
        count++;

        if (count == 1)
            mid = node;
        else if (count % 2 == 0)
            mid = mid->prev; // move mid back when count is even
    }

    int pop() {
        if (count == 0) {
            cout << "Stack is empty\n";
            return -1;
        }

        int item = head->data;
        head = head->next;

        if (head != NULL)
            head->prev = NULL;

        count--;

        if (count % 2 == 1 && mid != NULL)
            mid = mid->next; // move mid forward when count is odd

        return item;
    }

    int findMiddle() {
        if (mid == NULL) {
            cout << "Stack is empty\n";
            return -1;
        }
        return mid->data;
    }

    void deleteMiddle() {
        if (mid == NULL) {
            cout << "Stack is empty\n";
            return;
        }

        DLLNode* temp = mid;

        if (mid->prev != NULL)
            mid->prev->next = mid->next;
        if (mid->next != NULL)
            mid->next->prev = mid->prev;

        if (count % 2 == 0)
            mid = mid->next;
        else
            mid = mid->prev;

        delete temp;
        count--;
    }
};

int main() {
    MyStack st;
    st.push(1);
    st.push(2);
    st.push(3);
    st.push(4);
    st.push(5);

    cout << "Middle Element: " << st.findMiddle() << endl; // 3
    st.deleteMiddle();
    cout << "Middle Element after deletion: " << st.findMiddle() << endl; // 4

    cout << "Popped: " << st.pop() << endl; // 5
    cout << "Middle Element: " << st.findMiddle() << endl; // 4
}
