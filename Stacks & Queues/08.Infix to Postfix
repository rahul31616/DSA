#include <bits/stdc++.h>
using namespace std;

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

bool isLeftAssociative(char op) {
    return (op != '^'); // ^ is right associative
}

string infixToPostfix(string exp) {
    stack<char> st;
    string result = "";

    for (char ch : exp) {
        if (isalnum(ch)) {
            // Operand â†’ directly append
            result += ch;
        }
        else if (ch == '(') {
            st.push(ch);
        }
        else if (ch == ')') {
            // Pop until '('
            while (!st.empty() && st.top() != '(') {
                result += st.top();
                st.pop();
            }
            st.pop(); // Remove '('
        }
        else {
            // Operator
            while (!st.empty() && 
                   (precedence(st.top()) > precedence(ch) ||
                   (precedence(st.top()) == precedence(ch) && isLeftAssociative(ch))) &&
                   st.top() != '(') {
                result += st.top();
                st.pop();
            }
            st.push(ch);
        }
    }

    // Pop remaining operators
    while (!st.empty()) {
        result += st.top();
        st.pop();
    }
    return result;
}

int main() {
    string exp = "A+B*(C^D-E)^(F+G*H)-I";
    cout << "Postfix: " << infixToPostfix(exp) << endl;
    // Output: ABCD^E-FGH*+^*+I-
}
