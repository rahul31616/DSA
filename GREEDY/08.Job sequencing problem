struct Job {
    int id, deadline, profit;
};

vector<int> jobSequencing(vector<Job>& jobs) {
    // Sort jobs by profit descending
    sort(jobs.begin(), jobs.end(), [](auto& a, auto& b) {
        return a.profit > b.profit;
    });

    int maxDeadline = 0;
    for (auto& job : jobs)
        maxDeadline = max(maxDeadline, job.deadline);

    vector<bool> slot(maxDeadline + 1, false);
    vector<int> result(maxDeadline + 1, -1);

    for (auto& job : jobs) {
        // Try to schedule job as late as possible (before or on its deadline)
        for (int t = job.deadline; t > 0; --t) {
            if (!slot[t]) {
                slot[t] = true;
                result[t] = job.id;
                break;
            }
        }
    }

    return result;
}
