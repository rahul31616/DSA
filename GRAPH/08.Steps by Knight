#include <bits/stdc++.h>
using namespace std;

struct Cell {
    int x, y, dist;
    Cell(int x, int y, int dist) : x(x), y(y), dist(dist) {}
};

bool isInside(int x, int y, int n) {
    return x >= 1 && x <= n && y >= 1 && y <= n;
}

int minStepToReachTarget(vector<int>& KnightPos, vector<int>& TargetPos, int n) {
    int startX = KnightPos[0];
    int startY = KnightPos[1];
    int targetX = TargetPos[0];
    int targetY = TargetPos[1];

    if (startX == targetX && startY == targetY) return 0;

    vector<vector<bool>> visited(n + 1, vector<bool>(n + 1, false));
    queue<Cell> q;
    q.push(Cell(startX, startY, 0));
    visited[startX][startY] = true;

    int dx[8] = {2, 1, -1, -2, -2, -1, 1, 2};
    int dy[8] = {1, 2, 2, 1, -1, -2, -2, -1};

    while (!q.empty()) {
        Cell cur = q.front();
        q.pop();

        for (int i = 0; i < 8; ++i) {
            int nx = cur.x + dx[i];
            int ny = cur.y +
