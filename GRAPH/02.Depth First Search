#include <bits/stdc++.h>
using namespace std;

void dfsRec(int node, vector<bool>& visited, vector<vector<int>>& adj, vector<int>& traversal) {
    visited[node] = true;
    traversal.push_back(node);
    for (int neigh : adj[node]) {
        if (!visited[neigh]) {
            dfsRec(neigh, visited, adj, traversal);
        }
    }
}

vector<int> dfsOfGraph(int V, vector<vector<int>>& adj) {
    vector<bool> visited(V, false);
    vector<int> traversal;
    dfsRec(0, visited, adj, traversal);
    return traversal;
}

int main() {
    int V, E;
    cin >> V >> E;
    vector<vector<int>> adj(V);
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u); // for undirected graph
    }
    vector<int> dfsTraversal = dfsOfGraph(V, adj);
    for (int node : dfsTraversal) {
        cout << node << " ";
    }
    return 0;
}
