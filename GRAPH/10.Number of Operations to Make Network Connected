#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<int> parent, rankv;

    int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]); // Path compression
        return parent[x];
    }

    void unite(int x, int y) {
        int px = find(x), py = find(y);
        if (px == py) return;
        if (rankv[px] < rankv[py]) swap(px, py);
        parent[py] = px;
        if (rankv[px] == rankv[py]) rankv[px]++;
    }

    int makeConnected(int n, vector<vector<int>>& connections) {
        if (connections.size() < n - 1) return -1; // Not enough cables

        parent.resize(n);
        rankv.resize(n, 0);
        iota(parent.begin(), parent.end(), 0); // Initialize parent[i] = i

        for (auto &c : connections) {
            unite(c[0], c[1]);
        }

        int components = 0;
        for (int i = 0; i < n; i++) {
            if (find(i) == i) components++;
        }

        return components - 1; // Need (components - 1) cables
    }
};
