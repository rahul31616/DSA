#include <bits/stdc++.h>
using namespace std;

bool dfsCycle(int node, int parent, vector<vector<int>>& adj, vector<bool>& visited) {
    visited[node] = true;
    for (int neighbor : adj[node]) {
        if (!visited[neighbor]) {
            if (dfsCycle(neighbor, node, adj, visited))
                return true;
        } else if (neighbor != parent) {
            // A visited neighbor that's not the parent indicates a cycle
            return true;
        }
    }
    return false;
}

bool isCycle(int V, vector<vector<int>>& adj) {
    vector<bool> visited(V, false);
    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            if (dfsCycle(i, -1, adj, visited))
                return true;
        }
    }
    return false;
}

int main() {
    int V, E;
    cin >> V >> E;
    vector<vector<int>> adj(V);
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u); // Undirected edge
    }

    bool cycleFound = isCycle(V, adj);
    cout << (cycleFound ? "1" : "0") << "\n"; // GfG expects 1 for true, 0 for false
    return 0;
}
