class Solution {
public:
    void dfs(vector<vector<int>>& image, int i, int j, int original, int newColor) {
        int m = image.size(), n = image[0].size();

        // Base conditions
        if (i < 0 || i >= m || j < 0 || j >= n) return;
        if (image[i][j] != original) return;

        // Recolor current pixel
        image[i][j] = newColor;

        // Explore neighbors
        dfs(image, i + 1, j, original, newColor);
        dfs(image, i - 1, j, original, newColor);
        dfs(image, i, j + 1, original, newColor);
        dfs(image, i, j - 1, original, newColor);
    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int original = image[sr][sc];
        if (original == newColor) return image;

        dfs(image, sr, sc, original, newColor);
        return image;
    }
};
