#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<string> ans;
    string path;
    int dr[4] = {1, 0, 0, -1};  // D, L, R, U
    int dc[4] = {0, -1, 1, 0};
    char dir[4] = {'D', 'L', 'R', 'U'};

    void dfs(int r, int c, vector<vector<int>>& maze, vector<vector<bool>>& visited, int n) {
        if (r == n - 1 && c == n - 1) {
            ans.push_back(path);
            return;
        }

        visited[r][c] = true;
        for (int i = 0; i < 4; i++) {
            int nr = r + dr[i], nc = c + dc[i];
            if (nr >= 0 && nr < n && nc >= 0 && nc < n 
                && maze[nr][nc] == 1 && !visited[nr][nc]) {
                path.push_back(dir[i]);
                dfs(nr, nc, maze, visited, n);
                path.pop_back();
            }
        }
        visited[r][c] = false;
    }

    vector<string> ratInMaze(vector<vector<int>>& maze) {
        int n = maze.size();
        if (maze[0][0] == 0 || maze[n-1][n-1] == 0)
            return {"-1"};  // If source or dest blocked

        vector<vector<bool>> visited(n, vector<bool>(n, false));
        dfs(0, 0, maze, visited, n);

        if (ans.empty())
            return {"-1"};
        sort(ans.begin(), ans.end());
        return ans;
    }
};

int main() {
    int n;
    cin >> n;
    vector<vector<int>> maze(n, vector<int>(n));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> maze[i][j];

    Solution ob;
    vector<string> paths = ob.ratInMaze(maze);
    if (paths.size() == 1 && paths[0] == "-1")
        cout << -1;
    else
        for (const auto& p : paths)
            cout << p << " ";
    return 0;
}
