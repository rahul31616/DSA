#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if (matrix.empty()) return {};

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> ans;
        ans.reserve(m * n);

        int r1 = 0, c1 = 0;
        int r2 = m - 1, c2 = n - 1;

        while (ans.size() < m * n) {
            // Top row: left → right
            for (int j = c1; j <= c2 && ans.size() < m * n; ++j) {
                ans.push_back(matrix[r1][j]);
            }
            // Right column: top+1 → bottom-1
            for (int i = r1 + 1; i <= r2 - 1 && ans.size() < m * n; ++i) {
                ans.push_back(matrix[i][c2]);
            }
            // Bottom row: right → left
            for (int j = c2; j >= c1 && ans.size() < m * n; --j) {
                ans.push_back(matrix[r2][j]);
            }
            // Left column: bottom-1 → top+1
            for (int i = r2 - 1; i >= r1 + 1 && ans.size() < m * n; --i) {
                ans.push_back(matrix[i][c1]);
            }
            // Move inward
            ++r1; ++c1;
            --r2; --c2;
        }

        return ans;
    }
};
