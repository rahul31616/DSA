int countIslands(vector<vector<char>>& grid) {
    int rows = grid.size();
    int cols = grid[0].size();
    vector<vector<bool>> visited(rows, vector<bool>(cols, false));
    int count = 0;

    for (int r = 0; r < rows; ++r) {
        for (int c = 0; c < cols; ++c) {
            if (grid[r][c] == 'L' && !visited[r][c]) {
                dfs(grid, r, c, visited);
                ++count;
            }
        }
    }
    return count;
}

void dfs(vector<vector<char>>& grid, int r, int c, vector<vector<bool>>& visited) {
    static vector<int> dr = {-1,-1,-1,0,0,1,1,1};
    static vector<int> dc = {-1,0,1,-1,1,-1,0,1};

    visited[r][c] = true;

    for (int k = 0; k < 8; ++k) {
        int nr = r + dr[k];
        int nc = c + dc[k];
        if (nr >= 0 && nr < grid.size() &&
            nc >= 0 && nc < grid[0].size() &&
            grid[nr][nc] == 'L' && !visited[nr][nc]) {
            dfs(grid, nr, nc, visited);
        }
    }
}
