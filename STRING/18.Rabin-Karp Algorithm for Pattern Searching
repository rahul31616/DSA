#include <bits/stdc++.h>
using namespace std;

#define d 256   // number of characters in input alphabet
#define q 101   // a prime number for modulo (to avoid overflow)

void RabinKarp(string txt, string pat) {
    int n = txt.size(), m = pat.size();
    int i, j;
    int p = 0; // hash value for pattern
    int t = 0; // hash value for current window of text
    int h = 1;

    // h = pow(d, m-1) % q
    for (i = 0; i < m - 1; i++)
        h = (h * d) % q;

    // Calculate hash value of pattern and first window of text
    for (i = 0; i < m; i++) {
        p = (d * p + pat[i]) % q;
        t = (d * t + txt[i]) % q;
    }

    // Slide the pattern over text one by one
    for (i = 0; i <= n - m; i++) {
        // If hash values match, check characters one by one
        if (p == t) {
            bool match = true;
            for (j = 0; j < m; j++) {
                if (txt[i + j] != pat[j]) {
                    match = false;
                    break;
                }
            }
            if (match)
                cout << "Pattern found at index " << i << endl;
        }

        // Calculate hash for next window of text
        if (i < n - m) {
            t = (d * (t - txt[i] * h) + txt[i + m]) % q;

            // if t becomes negative, convert it to positive
            if (t < 0)
                t = (t + q);
        }
    }
}

int main() {
    string txt = "GEEKS FOR GEEKS";
    string pat = "GEEK";
    RabinKarp(txt, pat);
    return 0;
}
