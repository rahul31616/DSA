/**
 * Definition for a binary tree node.
 */
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        std::stack<TreeNode*> st;
        TreeNode* curr = root;
        
        while (curr || !st.empty()) {
            // Go as far left as possible
            while (curr) {
                st.push(curr);
                curr = curr->left;
            }
            // Visit node
            curr = st.top();
            st.pop();
            if (--k == 0) return curr->val;
            
            curr = curr->right;
        }
        
        return -1; // Not found (shouldn't happen if k is valid)
    }
};

Alternative: Recursive In-order Traversal

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int count = 0, result = -1;
        helper(root, k, count, result);
        return result;
    }

private:
    void helper(TreeNode* node, int k, int& count, int& result) {
        if (!node) return;
        helper(node->left, k, count, result);
        if (++count == k) {
            result = node->val;
            return;
        }
        helper(node->right, k, count, result);
    }
};


