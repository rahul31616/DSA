#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// 1. Collect node values via in-order traversal
void inorderCollect(Node* root, vector<int>& vals) {
    if (!root) return;
    inorderCollect(root->left, vals);
    vals.push_back(root->data);
    inorderCollect(root->right, vals);
}

// 2. Reassign sorted values back via in-order traversal
void inorderAssign(Node* root, const vector<int>& vals, int& idx) {
    if (!root) return;
    inorderAssign(root->left, vals, idx);
    root->data = vals[idx++];
    inorderAssign(root->right, vals, idx);
}

// Conversion function
Node* convertToBST(Node* root) {
    vector<int> vals;
    inorderCollect(root, vals);
    sort(vals.begin(), vals.end());
    int idx = 0;
    inorderAssign(root, vals, idx);
    return root;
}

// In-order print for validation
void printInorder(Node* root) {
    if (!root) return;
    printInorder(root->left);
    cout << root->data << " ";
    printInorder(root->right);
}

int main() {
    // Build sample binary tree:
    //     10
    //    /  \
    //   2    7
    //  / \
    // 8   4
    Node* root = new Node(10);
    root->left = new Node(2);
    root->right = new Node(7);
    root->left->left = new Node(8);
    root->left->right = new Node(4);

    cout << "Original inorder: ";
    printInorder(root);
    cout << "\n";

    root = convertToBST(root);

    cout << "BST inorder: ";
    printInorder(root);
    cout << "\n";

    return 0;
}
