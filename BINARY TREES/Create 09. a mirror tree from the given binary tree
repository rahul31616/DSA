#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

Node* mirrorTree(Node* root) {
    if (!root) return NULL;

    // Swap left and right
    swap(root->left, root->right);

    // Recur for left and right subtrees
    mirrorTree(root->left);
    mirrorTree(root->right);

    return root;
}

// Inorder Traversal to check
void inorder(Node* root) {
    if (!root) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

int main() {
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);

    cout << "Original Inorder: ";
    inorder(root);

    root = mirrorTree(root);

    cout << "\nMirror Inorder: ";
    inorder(root);
}
